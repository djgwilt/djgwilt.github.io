--- SaveFile ---

#############################
# Library Imports
#############################
from js import document, window
from pyodide.ffi import create_proxy

#############################
# Global Variables
#############################

# to store current position (x,y)
position = [0, 0]

# to store movement directions (x,y)
direction = [0, 0]

# to store the handle code for the timer interval to cancel it when we crash
intervalHandle = 0

#############################
# Sub-Programs
#############################

# the function called when a key is pressed - sets direction variable
def checkKey(event):
    global direction
    event.preventDefault()
    if event.key == "ArrowRight":
        direction = [1, 0]
    elif event.key == "ArrowLeft":
        direction = [-1, 0]
    elif event.key == "ArrowDown":
        direction = [0, 1]
    elif event.key == "ArrowUp":
        direction = [0, -1]

def getCell():
    return document.getElementById("R{}C{}".format(position[1], position[0]))

# the timer check function - runs every 300 milliseconds to update player1's position
def updatePosition():
    global direction
    if direction[0] != 0 or direction[1] != 0:
        # Set the cell where player1 was to empty
        cell = getCell()
        cell.className = ""
        
        # Update the column position for player1
        position[1] += direction[1]
        position[0] += direction[0]
        # Re-draw player1 (or report a crash)
        cell = getCell()
        if cell == None:
            handleCrash()
        elif cell.className == "NoClipPoint":
            cell.className = "player"
            direction = [0, 0]
            print("So the test is running smoothly I see...")
        else:
            cell.className = "player"

# if player1 has gone off the table, this tidies up including crash message
def handleCrash():
    window.clearInterval(intervalHandle)
    document.getElementById("Message").innerText = "Massive skill issue dude..."

# called when the page is loaded to start the timer checks
def runGame():
    global intervalHandle
    print("Running Game")
    document.addEventListener('keydown', create_proxy(checkKey))
    intervalHandle = window.setInterval(create_proxy(updatePosition), 300)

#############################
# Main Program
#############################

runGame()

--- SaveFile ---

--- Javascript SaveFile ---

const output = document.getElementById("output");


OUTPUT_PATCH = `
import sys
import io
sys.stdout = io.StringIO()
from js import addToOutput
orig_print = print
# redirect print via output textarea and console
def new_print(*args, **kwargs):
  stdout_len = len(sys.stdout.getvalue())
  orig_print(*args, **kwargs)
  stdout = sys.stdout.getvalue()
  addToOutput(stdout[stdout_len:])
  sys.stdout.flush()
print = new_print
`

INPUT_PATCH = `
from js import input_patch
input = input_patch
__builtins__.input = input_patch
`

function addToOutput(s) {
  output.value += s;
  console.log(s);
}

window.onerror = function(msg, url, lineNo, columnNo, error) {
  try {
    addToOutput("Error occurred: to view, run page in new tab & use ctrl-shift-j to view console");  
    pyodide.runPython("window.clearInterval(intervalHandle)");  
  } catch(err) {}
};

var pyodide = undefined;

async function main(){
  pyodide = await loadPyodide();
  pyodide.setDebug(true)
}

function input_patch(text) {
  return prompt(text);
};

pyodideReadyPromise = main();

async function evaluatePython(code) {
  await pyodideReadyPromise;
  pyodide.runPython(OUTPUT_PATCH);
  pyodide.runPython(INPUT_PATCH);
     
  try {
    pyodide.runPython(code);
  } catch(err) {
    addToOutput(err);
  }
}

function checkCellIds() {
  let $table = $("#RacingTrack");
  if ($table.length !== 1) {
    addToOutput("Make sure you have a table with id 'RacingTrack'.\n")
    return false;
  }
  let $rows = $table.find("tr");
  if ($rows.length < 1) {
    addToOutput("Warning: couldn't find any rows in the table.")
  }
  for (let iRow = 0; iRow < $rows.length; iRow++) {
    let $row = $($rows[iRow]);
    let $cells = $row.find("td");
    let res = $cells.map((iCol, cell) => {
      if (cell.id !== `R${iRow}C${iCol}`) {
        addToOutput(`Incorrect cell ID. Expected: 'R${iRow}C${iCol}', found: '${cell.id}'.\n`)
        return false;
      }
      return true;
    });
    if (!res.get().every(x => x)) {
      return false;
    }
  }
  return true;
}

$(document).ready(() => {
  if (checkCellIds()) {
    addToOutput("Ready!\n");
    $.get("game.py", function(data) {
      evaluatePython(data);
    });
  } else {
    addToOutput("There were issues with your HTML table. Please fix them and try again.")
  }
});

--- Javascript SaveFile ---